     1                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     2                                  ;assemble and link with:
     3                                  ;assemble: -->> nasm -f win64 -o P1.o P1.asm -l P1.lst
     4                                  ;link: -->> gcc -o P1 P1.o
     5                                  ;run: -->> P1
     6                                  ;debugger: -->> x64dbg P1
     7                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     8                                  ;-----------------------------------------
     9                                  
    10                                  ;file: P1.asm (examen practico -- cs - 32 bits )
    11                                  ;registro:
    12                                  ;nombres y apellidos:
    13                                  
    14                                  extern printf, scanf
    15                                  
    16                                  segment .data
    17                                  ;aqui se declaran variables inicializadas
    18                                  
    19 00000000 C0CE0E0D00000000        registro dq 219074240
    20 00000008 3FA3940000000000        carnet dq 9741119
    21                                  segment .bss
    22                                  ;Block Started by Symbol(BSS)
    23                                  ;aqui van las variables declaradas pero sin inicializar
    24 00000000 ????????                x resd 1 
    25                                  
    26                                  segment .text
    27                                  global main
    28                                  main:
    29                                  ; el divisor no tiene que ser cero 
    30                                  ;
    31                                  ;x = (registro & 0x11223344) ^ ((carnet >> 1) | 0x44332211)*2
    32                                  
    33                                  ;almacenando el resultado en memoria en la variable: x
    34                                  
    35                                  ;No está permitido el uso de las instrucciones de multiplicación: MUL o IMUL.
    36                                  
    37 00000000 4831C0                   xor rax , rax           
    38 00000003 4831DB                   xor rbx , rbx 
    39 00000006 4831C9                   xor rcx , rcx
    40                                  
    41 00000009 488B0425[00000000]      mov rax , [registro]     ;rax = registro 
    42 00000011 482544332211            and rax , 0x11223344	; rax = (registro & 0x11223344)  ---
    43                                  
    44 00000017 488B1C25[08000000]      mov rbx , [carnet] 
    45 0000001F 48D1FB                  sar rbx , 1				; rbx  = (carnet >> 1)
    46                                  
    47 00000022 4881CB11223344          or rbx , 0x44332211		; rbx = ((carnet >> 1) | 0x44332211)------
    48 00000029 4889D9                  mov rcx , rbx 
    49 0000002C 4801CB                  add rbx ,rcx 
    50                                  
    51 0000002F 4831D8                  xor rax ,rbx 
    52 00000032 48890425[00000000]      mov [x], rax 
    53                                  
    54                                  
    55 0000003A C3                      ret
    56                                  
    57                                  
    58                                  ;--------------------------------------
    59                                  ;============ subrutina ===============
    60                                  ;--------------------------------------
    61                                  ;aqui instrucciones subrutina (funcion)
    62                                  ;...
    63                                  ;...
    64 0000003B C3                      ret
