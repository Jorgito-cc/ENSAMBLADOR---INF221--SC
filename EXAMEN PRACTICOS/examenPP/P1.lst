     1                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     2                                  ;assemble and link with:
     3                                  ;assemble: -->> nasm -f win64 -o P1.o P1.asm -l P1.lst
     4                                  ;link: -->> gcc -o P1 P1.o
     5                                  ;run: -->> P1
     6                                  ;debugger: -->> x64dbg P1
     7                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     8                                  ;-----------------------------------------
     9                                  
    10                                  ;file: P1.asm (examen practico -- cs - 32 bits )
    11                                  ;registro:
    12                                  ;nombres y apellidos:
    13                                  
    14                                  extern printf, scanf
    15                                  
    16                                  segment .data
    17                                  ;aqui se declaran variables inicializadas
    18 00000000 01000000                a dd 1;-35501      ;registro
    19 00000004 02000000                b dd 2;219074240
    20 00000008 03000000                c dd 3;70503   ; carnet 
    21                                  ;d dd 9741119
    22                                  
    23                                  segment .bss
    24                                  ;Block Started by Symbol(BSS)
    25                                  ;aqui van las variables declaradas pero sin inicializar
    26 00000000 ????????                x resd 1 
    27                                  
    28                                  segment .text
    29                                  global main
    30                                  main:
    31                                  ; el divisor no tiene que ser cero 
    32                                  
    33                                  ;x = ((-30)*(-a)- (b >> 3) ) ^ (~c | (a&b) / ((-b) % c))
    34 00000000 4831C0                  XOR rax , rax 
    35 00000003 4831DB                  xor rbx , rbx
    36 00000006 4831C9                  xor rcx , rcx 
    37 00000009 4831D2                  xor rdx , rdx 
    38 0000000C 4831F6                  xor rsi , rsi 
    39                                  
    40 0000000F BBE2FFFFFF              mov ebx , -30 
    41 00000014 8B0C25[00000000]        mov ecx , [a] 
    42 0000001B F7D9                    neg ecx 			; ecx = (-a)
    43 0000001D 0FAFD9                  imul ebx , ecx 		; ebx = (-30)*(-a)   |
    44                                  
    45 00000020 8B3425[04000000]        mov esi , [b] 
    46 00000027 C1FE03                  SAR esi , 3 		; esi = (b >> 3)
    47                                  
    48 0000002A 29F3                    sub ebx , esi 		; ebx = ((-30)*(-a)- (b >> 3) ) 
    49                                  
    50 0000002C 448B0425[08000000]      mov r8d , [c] 
    51 00000034 41F7D8                  neg r8d				; r8d = ~c
    52                                  ;----
    53 00000037 8B0C25[00000000]        mov ecx , [a]
    54 0000003E 448B1C25[04000000]      mov r11d , [b]
    55 00000046 4421D9                  and ecx , r11d		; ecx = (a&b)
    56                                  ;-------------------------------
    57                                  ;x = ((-30)*(-a)- (b >> 3) ) ^ (~c | (a&b) / ((-b) % c))
    58                                  ;--------------------------
    59 00000049 8B0425[04000000]        mov eax  , [b] 		; eax  =  b
    60 00000050 F7D8                    neg eax 			; eax = -b 
    61 00000052 448B0C25[08000000]      mov r9d , [c]		; r9d =  c 
    62 0000005A 99                      cdq 
    63 0000005B 41F7F9                  idiv r9d          
    64                                  ; eax = esta el codiente 
    65                                  ; edx = esta el residuo o % 
    66                                  
    67 0000005E 89C8                    mov eax , ecx      ; eax = (a&b)
    68 00000060 4189D2                  mov r10d , edx     ; r10d  = esta el residuo 
    69 00000063 99                      cdq 
    70 00000064 41F7FA                  idiv r10d     
    71                                  
    72 00000067 4109C0                  or r8d , eax 		; r8d = (~c | (a&b) / ((-b) % c)
    73                                  
    74 0000006A 4431C3                  xor ebx , r8d      ; ebx = ((-30)*(-a)- (b >> 3) ) ^ (~c | (a&b) / ((-b) % c))
    75                                  
    76 0000006D 891C25[00000000]        mov [x] , ebx       ; x = ((-30)*(-a)- (b >> 3) ) ^ (~c | (a&b) / ((-b) % c))
    77 00000074 C3                      ret
    78                                  
    79                                  ;--------------------------------------
    80                                  ;============ subrutina ===============
    81                                  ;--------------------------------------
    82                                  ;aqui instrucciones subrutina (funcion)
    83                                  ;...
    84                                  ;...
    85 00000075 C3                      ret
